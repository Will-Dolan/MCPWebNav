{
  "query": "Python programming",
  "enhanced_query": "Python+programming+tutorial+basics+examples+best+practices",
  "action": "completed_with_extractions",
  "depth_reached": 3,
  "visited_urls": [
    "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
    "https://www.reddit.com/r/Python/comments/15u6fey/what_are_your_best_practices_for_coding_in_python/",
    "https://www.geeksforgeeks.org/python-programming-examples/"
  ],
  "extracted_content": [
    {
      "paragraph": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico,\nUniversity of Lisbon). Do you want to have a hard-cover book on this, check this list out.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "\"Beautiful is better than ugly.\" - PEP 20",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Follow PEP 8, when sensible.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Avoid one-letter variables (esp. l, O, I).",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Exception: In very short blocks, when the meaning is clearly visible from the immediate context",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Up to you, but be consistent. Enough said.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "However, note that: A tab could be a different number of columns depending on your environment, but a space is always one column. In terms of how many spaces (or tabs) constitutes indentation, it's more important to be consistent throughout your code than to use any specific tab stop value.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Avoid comparing to True, False or None.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "The with statement ensures that clean-up code is executed. When opening a file, with will make sure that the file is closed after the with block.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Yes",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Import entire modules instead of individual symbols within a module. For example, for a top-level module canteen that has a file canteen/sessions.py,",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Put all imports at the top of the page with three sections, each separated by a blank line, in this order:",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Follow PEP 257's docstring guidelines. reStructured Text and Sphinx can help to enforce these standards.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "When possible, use one-line docstrings for obvious functions.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Multiline docstrings should include",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Use them sparingly. Prefer code readability to writing a lot of comments. Often, small methods are more effective than comments.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Don't stress over it. 80-100 characters is fine.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Use parentheses for line continuations.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Strive for 100% code coverage, but don't get obsess over the coverage score.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Practice with Python program examples is always a good choice to scale up your logical understanding and programming skills and this article will provide you with the best sets of Python code examples.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "The below Python section contains a wide collection of Python programming examples. These Python code examples cover a wide range of basic concepts in the Python language, including List, Strings, Dictionary, Tuple, sets, and many more. Each program example contains multiple approaches to solve the problem.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "In this section, you will find all the basic Python programming examples. So, explore the section and complete the basic stage of Python programming.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "To scale up Array logic, try out the below-listed Python array programming examples. Here, you will find all the important Python  programming examples that are related to the Python array concept.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "Explore the below section and try out all the important Python List programming examples.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "Get a detailed list of Python Matrix examples and boost your understanding of matrix concepts in Python.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "If you are looking for Python programming examples that are based on the Python string concept, then scroll down to the below section and practice a wide range of Python string program examples.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "In this section, you will find out all the important practice sets or examples related to the Python Dictionary concept.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "Explore the wide range of Tuple programs here in this section of Python programming examples.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico,\nUniversity of Lisbon). Do you want to have a hard-cover book on this, check this list out.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Follow PEP 8, when sensible.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Avoid one-letter variables (esp. l, O, I).",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Up to you, but be consistent. Enough said.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "However, note that: A tab could be a different number of columns depending on your environment, but a space is always one column. In terms of how many spaces (or tabs) constitutes indentation, it's more important to be consistent throughout your code than to use any specific tab stop value.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "The with statement ensures that clean-up code is executed. When opening a file, with will make sure that the file is closed after the with block.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Follow PEP 257's docstring guidelines. reStructured Text and Sphinx can help to enforce these standards.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Strive for 100% code coverage, but don't get obsess over the coverage score.",
      "source": {
        "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
        "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub"
      }
    },
    {
      "paragraph": "Practice with Python program examples is always a good choice to scale up your logical understanding and programming skills and this article will provide you with the best sets of Python code examples.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "The below Python section contains a wide collection of Python programming examples. These Python code examples cover a wide range of basic concepts in the Python language, including List, Strings, Dictionary, Tuple, sets, and many more. Each program example contains multiple approaches to solve the problem.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    },
    {
      "paragraph": "In this section, you will find all the basic Python programming examples. So, explore the section and complete the basic stage of Python programming.",
      "source": {
        "url": "https://www.geeksforgeeks.org/python-programming-examples/",
        "title": "Python Programs | GeeksforGeeks"
      }
    }
  ],
  "collected_passages": [
    {
      "url": "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3",
      "title": "A guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico, U.Lisboa). \u00b7 GitHub",
      "content": "\n        Instantly share code, notes, and snippets.\n      \n\nA guide of best practices to developing in Python (meant for the first year students of the Instituto Superior T\u00e9cnico,\nUniversity of Lisbon). Do you want to have a hard-cover book on this, check this list out.\n\nInspired in Steve Sloria's gist.\n\n\"Beautiful is better than ugly.\" - PEP 20\n\nFollow PEP 8, when sensible.\n\nAvoid one-letter variables (esp. l, O, I).\n\nException: In very short blocks, when the meaning is clearly visible from the immediate context\n\nFine\n\nAvoid redundant labeling.\n\nYes\n\nNo\n\nPrefer \"reverse notation\".\n\nYes\n\nNo\n\nUp to you, but be consistent. Enough said.\n\n\n\nHowever, note that: A tab could be a different number of columns depending on your environment, but a space is always one column. In terms of how many spaces (or tabs) constitutes indentation, it's more important to be consistent throughout your code than to use any specific tab stop value.\n\nAvoid comparing to True, False or None.\n\nYes\n\nNo\n\nUse list comprehension when possible.\n\nYes\n\nNo\n\nThe with statement ensures that clean-up code is executed. When opening a file, with will make sure that the file is closed after the with block.\n\nYes\n\nImport entire modules instead of individual symbols within a module. For example, for a top-level module canteen that has a file canteen/sessions.py,\n\nYes\n\nNo\n\nException: For third-party code where documentation explicitly says to import individual symbols.\n\nRationale: Avoids circular imports. See here.\n\nPut all imports at the top of the page with three sections, each separated by a blank line, in this order:\n\nRationale: Makes it clear where each module is coming from.\n\nFollow PEP 257's docstring guidelines. reStructured Text and Sphinx can help to enforce these standards.\n\nWhen possible, use one-line docstrings for obvious functions.\n\nMultiline docstrings should include\n\nNotes\n\nUse them sparingly. Prefer code readability to writing a lot of comments. Often, small methods are more effective than comments.\n\nNo\n\nYes\n\nWhen you do write comments, remember: \"Strunk and White apply.\" - PEP 8\n\nDon't stress over it. 80-100 characters is fine.\n\nUse parentheses for line continuations.\n\nStrive for 100% code coverage, but don't get obsess over the coverage score.\n\nFunctional tests are higher level tests that are closer to how an end-user would interact with your application. They are typically used for web and GUI applications.\n\nNotice how the testcase and test method read together like \"Test A User can write a blog post\"."
    },
    {
      "url": "https://www.geeksforgeeks.org/python-programming-examples/",
      "title": "Python Programs | GeeksforGeeks",
      "content": "Practice with Python program examples is always a good choice to scale up your logical understanding and programming skills and this article will provide you with the best sets of Python code examples.\n\nThe below Python section contains a wide collection of Python programming examples. These Python code examples cover a wide range of basic concepts in the Python language, including List, Strings, Dictionary, Tuple, sets, and many more. Each program example contains multiple approaches to solve the problem.\n\nIn this section, you will find all the basic Python programming examples. So, explore the section and complete the basic stage of Python programming.\n\nTo scale up Array logic, try out the below-listed Python array programming examples. Here, you will find all the important Python  programming examples that are related to the Python array concept.\n\nExplore the below section and try out all the important Python List programming examples.\n\nGet a detailed list of Python Matrix examples and boost your understanding of matrix concepts in Python.\n\nIf you are looking for Python programming examples that are based on the Python string concept, then scroll down to the below section and practice a wide range of Python string program examples.\n\nIn this section, you will find out all the important practice sets or examples related to the Python Dictionary concept.\n\nExplore the wide range of Tuple programs here in this section of Python programming examples.\n\nIn this section, on searching and sorting examples, we have mentioned all the important example sets of Python searching and sorting to boost your Python programming concept.\n\nGet a complete list of Python pattern printing examples in the below section.\n\nIn this section, we have mentioned all important Python program examples that are related to the Python Date-Time concept.\n\nTo boost Python Regex concept get a list of Python Regex programming examples below.\n\nIf you want to scale up your Python file handling concept, explore the below section and find out all the real-life Python programming examples on Python file handling.\n\nFind a more important or popular list of Python programming examples below and upscale your Python programming skills. \n\n"
    },
    {
      "url": "https://www.reddit.com/r/Python/comments/15u6fey/what_are_your_best_practices_for_coding_in_python/",
      "title": "Reddit - The heart of the internet",
      "content": "\nPycon US 2025 starts next week!\n    \n\n\n              The official Python community for Reddit! Stay up to date with the latest news, packages, and meta information relating to the Python programming language. \n---\n\nIf you have questions or are new to Python use r/LearnPython\n            \n\n\n      I have been writing Python for six years now, it's my primary language - but mostly in an academic/personal project setting and for machine learning.\n    \n\n\n      Now, I find myself spearheading an ML project at a big company, and our backend code base keeps growing, and other people depend on it. There are layers to it, with threads spawning, and dependencies on caches and databases for state sharing. It's more than a pet project - you get the gist.\n    \n\n\n      I want to write clean code.\n    \n\n\n      Am I wrong in thinking that the code should have enough documentation ingrained that using some automated service gives me an API documentation and I don't have to write it manually?\n    \n\n\n      That's what I see with many open source projects. How are people doing it in the industry? Do you use type hints? If yes, mypy or pyright or something else?\n    \n\n\n      On IDEs - a guy I respect used to write in PyCharm with strong pylint rules, but that was 5 years ago. VSCode is very lightweight when compared to PyCharm. For production-ready/\"industry-grade\" code, what are your personal recommendations on IDEs? If VSCode, what extensions do you use?\n    \n\n\n      Also, any other general personal recommendations? I usually strongly abide by \"explicit is better than implicit\".\n    \n\n\n      Edit: Also, can you share your thoughts on FastAPI vs Flask if you've used these?\n    \n\n\n                  Create your account and connect with a world of communities.\n                \n\n\nPycon US 2025 starts next week!\n    \n\nAnyone can view, post, and comment to this community"
    }
  ]
}